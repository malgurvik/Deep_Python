"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
üìå –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è
–≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª.
üìå –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
"""

import logging

logger = logging.getLogger(__name__)
logging.basicConfig(filename='log1.log', filemode='w')


def division(num1, num2):
    try:
        return num1 / num2
    except ZeroDivisionError as ex:
        logger.error(ex)


print(division(10, 5))
print(division(10, 0))

# logging.basicConfig(filename='example1.log.', filemode='w', encoding='utf-8',
#                     format='{levelname} - {asctime} –≤ —Å—Ç—Ä–æ–∫–µ {lineno} '
#                            '—Ñ—É–Ω–∫—Ü–∏—è "{funcName}()" : {msg}', style='{', level=logging.WARNING)
#
#
# def func(a, b):
#     try:
#         res = a / b
#     except ZeroDivisionError:
#         logging.warning('–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å')
#         return ''
#     else:
#         return res
#
#
# print(func(5, 0))
